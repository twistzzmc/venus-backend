openapi: 3.0.0
info:
  title: ShoppifyIO API
  version: 1.0.0
  description: API for ShoppifyIO.

servers:
  - url: 'http://127.0.0.1:8080'
    description: Localhost server

paths:
  /register:
    put:
      summary: Register new user.
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        201:
          description: User successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad request, one or more parameters are empty or missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      summary: User login.
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      responses:
        200:
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponse'
        400:
          description: Bad request, username or password missing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/items:
    get:
      summary: Gets all user items of the logged user.
      operationId: getUserItems
      security:
        - JWT: []
      responses:
        200:
          description: Shopping list successfully created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserItem'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/items/add:
    post:
      summary: Add new user item.
      operationId: addUserItem
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserItemAdd'
      responses:
        201:
          description: Shopping list successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserItem'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/{shopping-list-id}:
    get:
      summary: Get shopping list.
      operationId: addShoppingList
      security:
        - JWT: []
      parameters:
        - in: path
          name: shopping-list-id
          description: Shopping List ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Shopping list successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/add:
    post:
      summary: Add new shopping list.
      operationId: addShoppingList
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListAdd'
      responses:
        200:
          description: Shopping list successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/modify:
    post:
      summary: Modify shopping list and its items.
      operationId: modifyShoppingList
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListModify'
      responses:
        200:
          description: Shopping list successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/delete/{shopping-list-id}:
    delete:
      summary: Delete shopping list.
      operationId: deleteShoppingList
      security:
        - JWT: []
      parameters:
        - in: path
          name: shopping-list-id
          description: Shopping List ID.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Shopping list successfully deleted.
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/complete/{shopping-list-id}:
    post:
      summary: Mark shopping list as completed.
      operationId: completeShoppingList
      security:
        - JWT: []
      parameters:
        - in: path
          name: shopping-list-id
          description: Shopping List ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Shopping list successfully marked as completed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/incomplete/{shopping-list-id}:
    post:
      summary: Mark shopping list as incomplete.
      operationId: incompleteShoppingList
      security:
        - JWT: []
      parameters:
        - in: path
          name: shopping-list-id
          description: Shopping List ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Shopping list successfully marked as incomplete.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/share:
    post:
      summary: Share shopping list with friend.
      operationId: shareShoppingList
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListShare'
      responses:
        200:
          description: Shopping list successfully shared.
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/active:
    get:
      summary: Get active shopping lists.
      operationId: getActiveShoppingLists
      security:
        - JWT: []
      responses:
        200:
          description: Successfully retrieved active shopping lists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingListHeader'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-list/archive:
    get:
      summary: Archive a shopping list.
      operationId: archiveShoppingList
      security:
        - JWT: [ ]
      responses:
        200:
          description: Shopping list successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-item/complete/{shopping-item-id}:
    post:
      summary: Mark shopping item as completed.
      operationId: completeShoppingItem
      security:
        - JWT: []
      parameters:
        - in: path
          name: shopping-item-id
          description: Shopping Item ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Shopping item successfully marked as completed.
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /shopping-item/incomplete/{shopping-item-id}:
    post:
      summary: Mark shopping item as incomplete.
      operationId: incompleteShoppingItem
      security:
        - JWT: []
      parameters:
        - in: path
          name: shopping-item-id
          description: Shopping Item ID.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Shopping item successfully marked as incomplete.
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/add:
    post:
      summary: Add new category.
      operationId: addCategory
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryAdd'
      responses:
        200:
          description: Category successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/list:
    get:
      summary: Gets user shopping list categories.
      operationId: listCategories
      security:
        - JWT: []
      responses:
        200:
          description: Shopping list categories successfully downloaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/item:
    get:
      summary: Load user item categories.
      operationId: itemCategories
      security:
        - JWT: []
      responses:
        200:
          description: Shopping item categories successfully downloaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories/delete/{category-id}:
    delete:
      summary: Delete category.
      operationId: deleteCategory
      security:
        - JWT: []
      parameters:
        - in: path
          name: category-id
          description: Category ID.
          required: true
          schema:
            type: integer
      responses:
        204:
          description: Category successfully deleted.
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /friends/add:
    put:
      summary: Add new friend.
      operationId: addFriend
      security:
        - JWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendAdd'
      responses:
        201:
          description: Friend successfully added.
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /friends:
    get:
      summary: Gets user friends.
      operationId: listFriends
      security:
        - JWT: []
      responses:
        200:
          description: User friends successfully downloaded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: Bad request, one or more parameters are invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Not Authorised.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not found, specified resource not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    JWT:
      type: apiKey
      in: header
      name: token
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user's ID.
          example: 1
        username:
          type: string
          description: The user's username.
          example: johndoe
        email:
          type: string
          description: The user's email address.
          example: johndoe@example.com
    UserItemAdd:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the user item.
          example: "Milk"
        category_id:
          type: integer
          description: ID of the user item category.
          example: 1
    UserItem:
      type: object
      properties:
        id:
          type: integer
          description: User item ID.
          example: 1
        owner_id:
          type: integer
          description: ID of the owner of the item.
          example: 1
        name:
          type: string
          description: Name of the user item.
          example: "Milk"
        category_id:
          type: integer
          description: ID of the user item category.
          example: 1
    RegisterUser:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: The user's username.
          example: johndoe
        email:
          type: string
          description: The user's email address.
          example: johndoe@example.com
        password:
          type: string
          description: The user's password.
          example: '123456'
    FriendAdd:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: Username of the new friend.
          example: "Mario"
    UserLoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: The user's username.
          example: johndoe
        password:
          type: string
          description: The user's password.
          example: '123456'
    UserLoginResponse:
      type: object
      properties:
        token:
          type: string
          description: The authentication token.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
    ShoppingListAdd:
      type: object
      required:
        - title
        - shopping_items
      properties:
        title:
          type: string
          description: The title of the shopping list.
          example: "Groceries"
        category_id:
          type: integer
          description: The ID of the category.
          example: 1
        shopping_items:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingItemAdd'
    ShoppingListShare:
      type: object
      required:
        - shopping_list_id
        - friend_ids
      properties:
        shopping_list_id:
          type: integer
          description: ID shopping list to share.
          example: 1
        friend_ids:
          type: array
          description: IDs of friends to share.
          items:
            type: object
            required:
              - friend_id
            properties:
              friend_id:
                type: integer
                description: ID of friend to share.
                example: 1
    ShoppingItemAdd:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the shopping item.
          example: "Milk"
        quantity:
          type: integer
          description: Quantity of the item
          example: 1
        category_id:
          type: integer
          description: ID of the category assigned to the item.
          example: 12
    ShoppingItemModify:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: ID of the modified shopping item.
          example: 1
        name:
          type: string
          description: The new name of the modified shopping item.
          example: "Bread"
        category_id:
          type: integer
          description: New category ID.
          example: 1
        quantity:
          type: integer
          description: New quantity.
          example: 3
    ShoppingItemDelete:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: ID of the shopping item to be deleted.
          example: 1
    ShoppingListModify:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: ID of the modified shopping list.
          example: 1
        title:
          type: string
          description: New title of the shopping list.
          example: "Utilities"
        category_id:
          type: integer
          description: New category assigned to the shopping list.
          example: 1
        new_shopping_items:
          type: array
          description: List of shopping items to add to the shopping list.
          items:
            $ref: '#/components/schemas/ShoppingItemAdd'
        modified_shopping_items:
          type: array
          description: List of shopping items that exist in the shopping list to modify.
          items:
            $ref: '#/components/schemas/ShoppingItemModify'
        deleted_shopping_items:
          type: array
          description: List of shopping items that exist in the shopping list to be deleted.
          items:
            $ref: '#/components/schemas/ShoppingItemDelete'
    ShoppingList:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the shopping list.
          example: 1
        owner_id:
          type: integer
          description: The ID of the owner.
          example: 1
        title:
          type: string
          description: The title of the shopping list.
          example: "Groceries"
        creation_date:
          type: string
          format: date-time
          description: The creation date of the shopping list.
          example: "2023-06-03T12:00:00Z"
        update_date:
          type: string
          format: date-time
          description: The last update date of the shopping list.
          example: "2023-06-03T12:00:00Z"
        is_completed:
          type: boolean
          description: Whether the shopping list is completed.
          example: false
        category:
          $ref: '#/components/schemas/Category'
    ShoppingListHeader:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the shopping list.
          example: 1
        title:
          type: string
          description: The title of the shopping list.
          example: "Groceries"
        creation_date:
          type: string
          format: date-time
          description: The date of creation of the shopping list.
          example: "2023-06-03T12:00:00Z"
        update_date:
          type: string
          format: date-time
          description: The last update date of the shopping list.
          example: "2023-06-03T12:00:00Z"
        updated_by:
          type: string
          description: The username of the user who last updated the shopping list.
          example: "Mario"
        owner_username:
          type: string
          description: The username of the owner of the list.
          example: "Luigi"
        category_name:
          type: string
          description: The name of the category.
          example: "Food"
        category_color:
          type: string
          description: The color associated with the category.
          example: "#FF5733"
        user_id:
          type: integer
          description: The ID of the user.
          example: 1
        is_user_owner:
          type: boolean
          description: Whether the user is the owner of the shopping list.
          example: true
    CategoryAdd:
      type: object
      required:
        - title
        - type
        - color
      properties:
        title:
          type: string
          description: Title of the new category.
          example: "Sweets"
        type:
          $ref: "#/components/schemas/CategoryType"
        description:
          type: string
          description: Description of the new category.
          example: "Only sweet stuff"
        color:
          type: string
          description: Category color.
          example: '#ffffff'
    Category:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the category.
          example: 1
        owner_id:
          type: integer
          description: The ID of the owner.
          example: 1
        type:
          $ref: '#/components/schemas/CategoryType'
        title:
          type: string
          description: The title of the category.
          example: "Groceries"
        description:
          type: string
          description: The description of the category.
          example: "Items to buy for daily meals."
        color:
          type: string
          description: Color of the category.
          example: '#ffffff'
    Error:
      type: object
      properties:
        error:
          type: string
          description: The custom_errors message.
          example: One or more parameters are empty or missing.

    CategoryType:
      type: string
      description: "Enum Category object types"
      enum:
        - ShoppingList
        - Item